# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: refcoach

provider:
  name: aws # Typeof target cloud provider
  stage: dev # Set the default stage used. Default is dev
  region: eu-west-1 # Overwrite the default region used. Default is us-east-1
  runtime: nodejs8.10 # Overwrite the the runtime used. Default is nodejs6.10
  profile: default # The default profile to use with this service
  timeout: 300 # optional, in seconds, default is 6
  memorySize: 1536 # optional, in MB, default is 1024
  #deploymentBucket:
  #  name: ${self:service}.com.serverless.${self:provider.region}.deploys # Overwrite the default deployment bucket
  #  serverSideEncryption: AES256 # when using server-side encryption
  #versionFunctions: false # optional, default is true
  apikeys: # Api Key use to protect webservice call
    - REFCOACH # API key name created manually in API gateway. Don't forget to create a "Usage Plans" with the API Key when deploy an new service
    #2O3I4U928U349F82N3948D923U932F
  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action: # Gives permission to Application DynamoDB tables in a specific region
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}_*"  #arn:aws:dynamodb:eu-west-1:585773263143:table/MyApplicationTest_helloUsers

  stackTags: # Optional CF stack tags
    environment: ${opt:stage, self:provider.stage}
    application: ${self:service}

  environment:
    SERVERLESS_PROJECT_NAME: ${self:service} # FIXME Required for Sessions
    SERVERLESS_PROJECT: ${self:service}
    SERVERLESS_STAGE: ${self:custom.stage}
    SERVERLESS_REGION: ${self:custom.region}

package: # Create one package for deploy all lambda
  individually: false

functions:
  authorizer:
    handler: src/user/lambda-authorizer.handler
    name: ${self:service}-authorizer
    description: The custom authorizer used by API GW to validate a token

  authorizer-passthrough:
    handler: src/user/lambda-authorizer-passthrough.handler
    name: ${self:service}-authorizer-passthrough
    description: The custom authorizer passthrough used by API GW to validate a token when there is one


##############################################################
############################ USER ############################
##############################################################
  authentication:
    handler: src/user/lambda-authentication.handler
    name: ${self:service}-authentication
    description: The lambda in charge of user authentication
    events:
      - http:
          path: /user/login
          method: post
          cors: true 
          private: true

  saveuser:
    handler: src/user/lambda-saveuser.handler
    name: ${self:service}-saveuser
    description: Save an user
    events:
      - http:
          path: /user
          method: post
          cors: true
          private: true
          integration: lambda-proxy
          authorizer:    # An AWS API Gateway custom authorizer function
            name: authorizer-passthrough # The name of the authorizer function (must be in this service)


  removeuser:
    handler: src/user/lambda-removeuser.handler
    name: ${self:service}-removeuser
    description: Remove an user
    events:
      - http:
          path: /user/{email}
          method: delete
          cors: true
          private: true
          integration: lambda-proxy
          authorizer:    # An AWS API Gateway custom authorizer function
            name: authorizer # The name of the authorizer function (must be in this service)
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  getuser:
    handler: src/user/lambda-getuser.handler
    name: ${self:service}-getuser
    description: Get an user
    events:
      - http:
          path: /user/{email}
          method: get
          cors: true
          private: true
          integration: lambda-proxy
          authorizer:    # An AWS API Gateway custom authorizer function
            name: authorizer # The name of the authorizer function (must be in this service)
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  getusers:
    handler: src/user/lambda-getusers.handler
    name: ${self:service}-getusers
    description: Get all users
    events:
      - http:
          path: /user
          method: get
          cors: true
          private: true
          integration: lambda-proxy
          authorizer:    # An AWS API Gateway custom authorizer function
            name: authorizer-passthrough # The name of the authorizer function (must be in this service)


##############################################################
######################### ASSESSMENT #########################
##############################################################
  getAssessment:
    handler: src/lambda-crud-assessment.getItem
    name: ${self:service}-assessment-get
    description: Get an assessment
    events:
      - http:
          path: /assessment/{id}
          method: get
          cors: true
          private: true
          integration: lambda-proxy
          authorizer:    # An AWS API Gateway custom authorizer function
            name: authorizer # The name of the authorizer function (must be in this service)
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  getAssessments:
    handler: src/lambda-crud-assessment.getItems
    name: ${self:service}-assessment-gets
    description: Get all assessments
    events:
      - http:
          path: /assessment
          method: get
          cors: true
          private: true
          integration: lambda-proxy
          authorizer:    # An AWS API Gateway custom authorizer function
            name: authorizer # The name of the authorizer function (must be in this service)
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  saveAssessment:
    handler: src/lambda-crud-assessment.saveItem
    name: ${self:service}-assessment-save
    description: Save an assessment
    events:
      - http:
          path: /assessment
          method: post
          cors: true
          private: true
          integration: lambda-proxy
          authorizer:    # An AWS API Gateway custom authorizer function
            name: authorizer # The name of the authorizer function (must be in this service)
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'


  removeAssessment:
    handler: src/lambda-crud-assessment.removeItem
    name: ${self:service}-assessment-remove
    description: Remove an assessment
    events:
      - http:
          path: /assessment/{id}
          method: delete
          cors: true
          private: true
          integration: lambda-proxy
          authorizer:    # An AWS API Gateway custom authorizer function
            name: authorizer # The name of the authorizer function (must be in this service)
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'


##############################################################
########################## COACHING ##########################
##############################################################
  getCoaching:
    handler: src/lambda-crud-coaching.getItem
    name: ${self:service}-coaching-get
    description: Get an coaching
    events:
      - http:
          path: /coaching/{id}
          method: get
          cors: true
          private: true
          integration: lambda-proxy
          authorizer:    # An AWS API Gateway custom authorizer function
            name: authorizer # The name of the authorizer function (must be in this service)
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  getCoachings:
    handler: src/lambda-crud-coaching.getItems
    name: ${self:service}-coaching-gets
    description: Get all coachings
    events:
      - http:
          path: /coaching
          method: get
          cors: true
          private: true
          integration: lambda-proxy
          authorizer:    # An AWS API Gateway custom authorizer function
            name: authorizer # The name of the authorizer function (must be in this service)
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  saveCoaching:
    handler: src/lambda-crud-coaching.saveItem
    name: ${self:service}-coaching-save
    description: Save an coaching
    events:
      - http:
          path: /coaching
          method: post
          cors: true
          private: true
          integration: lambda-proxy
          authorizer:    # An AWS API Gateway custom authorizer function
            name: authorizer # The name of the authorizer function (must be in this service)
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'


  removeCoaching:
    handler: src/lambda-crud-coaching.removeItem
    name: ${self:service}-coaching-remove
    description: Remove an coaching
    events:
      - http:
          path: /coaching/{id}
          method: delete
          cors: true
          private: true
          integration: lambda-proxy
          authorizer:    # An AWS API Gateway custom authorizer function
            name: authorizer # The name of the authorizer function (must be in this service)
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'


##############################################################
############################ PRO #############################
##############################################################
  getPro:
    handler: src/lambda-crud-pro.getItem
    name: ${self:service}-pro-get
    description: Get an pro
    events:
      - http:
          path: /pro/{id}
          method: get
          cors: true
          private: true
          integration: lambda-proxy
          authorizer:    # An AWS API Gateway custom authorizer function
            name: authorizer # The name of the authorizer function (must be in this service)
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  getPros:
    handler: src/lambda-crud-pro.getItems
    name: ${self:service}-pro-gets
    description: Get all pros
    events:
      - http:
          path: /pro
          method: get
          cors: true
          private: true
          integration: lambda-proxy
          authorizer:    # An AWS API Gateway custom authorizer function
            name: authorizer # The name of the authorizer function (must be in this service)
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  savePro:
    handler: src/lambda-crud-pro.saveItem
    name: ${self:service}-pro-save
    description: Save an pro
    events:
      - http:
          path: /pro
          method: post
          cors: true
          private: true
          integration: lambda-proxy
          authorizer:    # An AWS API Gateway custom authorizer function
            name: authorizer # The name of the authorizer function (must be in this service)
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'


  removePro:
    handler: src/lambda-crud-pro.removeItem
    name: ${self:service}-pro-remove
    description: Remove an pro
    events:
      - http:
          path: /pro/{id}
          method: delete
          cors: true
          private: true
          integration: lambda-proxy
          authorizer:    # An AWS API Gateway custom authorizer function
            name: authorizer # The name of the authorizer function (must be in this service)
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

##############################################################
########################### REFEREE ##########################
##############################################################
  getReferee:
    handler: src/lambda-crud-referee.getItem
    name: ${self:service}-referee-get
    description: Get an referee
    events:
      - http:
          path: /referee/{id}
          method: get
          cors: true
          private: true
          integration: lambda-proxy
          authorizer:    # An AWS API Gateway custom authorizer function
            name: authorizer # The name of the authorizer function (must be in this service)
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  getReferees:
    handler: src/lambda-crud-referee.getItems
    name: ${self:service}-referee-gets
    description: Get all referees
    events:
      - http:
          path: /referee
          method: get
          cors: true
          private: true
          integration: lambda-proxy
          authorizer:    # An AWS API Gateway custom authorizer function
            name: authorizer # The name of the authorizer function (must be in this service)
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  saveReferee:
    handler: src/lambda-crud-referee.saveItem
    name: ${self:service}-referee-save
    description: Save an referee
    events:
      - http:
          path: /referee
          method: post
          cors: true
          private: true
          integration: lambda-proxy
          authorizer:    # An AWS API Gateway custom authorizer function
            name: authorizer # The name of the authorizer function (must be in this service)
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'


  removeReferee:
    handler: src/lambda-crud-referee.removeItem
    name: ${self:service}-referee-remove
    description: Remove an referee
    events:
      - http:
          path: /referee/{id}
          method: delete
          cors: true
          private: true
          integration: lambda-proxy
          authorizer:    # An AWS API Gateway custom authorizer function
            name: authorizer # The name of the authorizer function (must be in this service)
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

##############################################################
######################## SKILL PROFILE #######################
##############################################################
  getSkillProfile:
    handler: src/lambda-crud-skillprofile.getItem
    name: ${self:service}-skillprofile-get
    description: Get an skillprofile
    events:
      - http:
          path: /skillprofile/{id}
          method: get
          cors: true
          private: true
          integration: lambda-proxy
          authorizer:    # An AWS API Gateway custom authorizer function
            name: authorizer # The name of the authorizer function (must be in this service)
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  getSkillProfiles:
    handler: src/lambda-crud-skillprofile.getItems
    name: ${self:service}-skillprofile-gets
    description: Get all skillprofiles
    events:
      - http:
          path: /skillprofile
          method: get
          cors: true
          private: true
          integration: lambda-proxy
          authorizer:    # An AWS API Gateway custom authorizer function
            name: authorizer # The name of the authorizer function (must be in this service)
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'

  saveSkillProfile:
    handler: src/lambda-crud-skillprofile.saveItem
    name: ${self:service}-skillprofile-save
    description: Save an skillprofile
    events:
      - http:
          path: /skillprofile
          method: post
          cors: true
          private: true
          integration: lambda-proxy
          authorizer:    # An AWS API Gateway custom authorizer function
            name: authorizer # The name of the authorizer function (must be in this service)
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'


  removeSkillProfile:
    handler: src/lambda-crud-skillprofile.removeItem
    name: ${self:service}-skillprofile-remove
    description: Remove an skillprofile
    events:
      - http:
          path: /skillprofile/{id}
          method: delete
          cors: true
          private: true
          integration: lambda-proxy
          authorizer:    # An AWS API Gateway custom authorizer function
            name: authorizer # The name of the authorizer function (must be in this service)
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            identityValidationExpression: '^Bearer [-0-9a-zA-z\.]*$'


########################################################################################################
########################################################################################################
########################################################################################################

resources:
  Resources:
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
         Name: ${self:service}
      
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}_user_${self:custom.stage}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    AssessmentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}_assessment_${self:custom.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    CoachingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}_coaching_${self:custom.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    ProTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}_pro_${self:custom.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    RefereeTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}_referee_${self:custom.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    SkillProfileTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}_skillprofile_${self:custom.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1




plugins:
  - serverless-dynamodb-local # permit to work offline with a dynamodb
  - serverless-offline
  - serverless-aws-alias
  - serverless-plugin-diff # permit to make a diff between configs
  - serverless-plugin-scripts # permit to write custom script in serverless.yml

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}

  #dynamodb:
  #  start:
  #    port: 8000
  #    cors: true
  #    migrate: false
  #    inMemory: false
  #    dbPath: '/tmp/DynamoDB/'
  #    sharedDb: true
  #  seed:
  #    dev:
  #      sources:
  #        - table: helloUsers
  #          sources: [./data/dev/helloUsers.json]

          #integration: proxy
          #request:
          #  passThrough: NEVER
          #  template:
          #    application/json: "{ 'body' : $input.json('$'), 'context' : { 'principalId' : $context.authorizer.login, 'profile2' : $context.authorizer.profile, 'http-method'' : $context.httpMethod} }"
